version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      target: production
    container_name: auracare-app
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=${JWT_EXPIRE:-30d}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - FASTAPI_BASE_URL=${FASTAPI_BASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=info
    depends_on:
      - mongo
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - auracare-network

  # MongoDB service
  mongo:
    image: mongo:6.0
    container_name: auracare-mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=auracare
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - auracare-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7.0-alpine
    container_name: auracare-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - auracare-network

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: auracare-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - auracare-network

  # PM2 process manager for Node.js
  pm2:
    image: keymetrics/pm2:latest
    container_name: auracare-pm2
    restart: always
    volumes:
      - ./ecosystem.config.js:/app/ecosystem.config.js:ro
    depends_on:
      - app
    command: ["pm2-runtime", "start", "ecosystem.config.js"]
    networks:
      - auracare-network

volumes:
  mongo-data:
  redis-data:

networks:
  auracare-network:
    driver: bridge
